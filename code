
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters


EMISSIONS = {
    "авто": 0.2,
    "самолёт": 0.25,
    "кондиционер": 0.4,
    "автобус": 0.09,
    "велосипед": 0.0,
    "метро": 0.04,
    "стиральная машина": 0.6,
    "смартфон": 0.005
}

RECOMMENDATIONS = {
    "авто": "Иногда можно пройтись пешком",
    "самолёт": "Попробуй поезд, если есть такая возможность",
    "кондиционер": "Проветривай помещение регулярно",
    "автобус": "Хороший выбор",
    "велосипед": "Полностью экологичный транспорт",
    "метро": "Экологичный способ передвижения",
    "стиральная машина": "Стирай, когда барабан полностью загружен",
    "смартфон": "Не заряжай его без необходимости"
}

user_history = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["авто", "самолёт", "автобус"],
        ["велосипед", "метро", "кондиционер"],
        ["стиральная машина", "смартфон"],
        ["Назад"]
    ]
    await update.message.reply_text(
        "Выбери одно из действий:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Этот бот помогает отслеживать выбросы CO2.\n"
        "1. Нажми /start\n"
        "2. Выбери действие\n"
        "3. Введи количество в км, часах или разах\n"
        "4. Получи расчёт выбросов и совет"
    )


async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    total = user_history.get(user_id, 0)
    await update.message.reply_text(f"Суммарные выбросы: {total:.2f} кг CO2")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    user_id = update.effective_user.id

    if text == "назад":
        context.user_data.clear()
        await start(update, context)
        return

    if text in EMISSIONS:
        context.user_data["activity"] = text
        await update.message.reply_text("Сколько? (в км, часах или разах)")
    elif "activity" in context.user_data:
        try:
            amount = float(text)
            if amount < 0:
                raise ValueError
            activity = context.user_data["activity"]
            co2 = amount * EMISSIONS[activity]
            user_history[user_id] = user_history.get(user_id, 0) + co2

            await update.message.reply_text(
                f"{activity}: {co2:.2f} кг CO2\n{RECOMMENDATIONS[activity]}"
            )
            context.user_data.clear()
        except:
            await update.message.reply_text("Введи  число")
    else:
        await update.message.reply_text("Сначала выбери действие через /start")


def main():
    app = ApplicationBuilder().token("7841053985:AAFLwoC66GQcLLk8JOKE1prox2nNqX_rjz4").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("history", history))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == "__main__":
    main()

